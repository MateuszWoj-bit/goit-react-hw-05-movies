{"version":3,"file":"static/js/264.01e3f508.chunk.js","mappings":"kOA4GA,UAvGkB,WAChB,OAAkCA,EAAAA,EAAAA,UAAS,IAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAkCH,EAAAA,EAAAA,UAAS,CAAC,GAA5C,eAAOK,EAAP,KAAkBC,EAAlB,KACA,GAAkCN,EAAAA,EAAAA,WAAS,GAA3C,eAAOO,EAAP,KAAkBC,EAAlB,KACA,GAA4BR,EAAAA,EAAAA,WAAS,GAArC,eAAOS,EAAP,KAAeC,EAAf,MAEAC,EAAAA,EAAAA,YAAU,WACRH,GAAa,GACb,IAAMI,EAAc,mCAAG,+GAEIC,MAAM,sCAAD,OACYV,EADZ,oCAC+CW,EAAAA,IAHxD,cAEbC,EAFa,gBAKAA,EAASC,OALT,OAKbC,EALa,OAMnBf,EAAae,EAAKC,QAAQC,IAC1Bb,EAAaW,EAAKC,SAClBV,GAAa,GARM,kDAUnBA,GAAa,GACbY,QAAQC,MAAM,4BAAd,MAXmB,0DAAH,qDAepBT,GACD,GAAE,CAACT,IAEJ,IAAMmB,EACJjB,GAAakB,OAAOC,KAAKnB,GAAWoB,QAAO,SAAAC,GAAO,MAAgB,OAAZA,CAAJ,IAMpD,OACE,2BACGnB,IAAa,SAAC,IAAD,KACd,4CACEN,GAAkC,IAArBA,EAAU0B,QAAiB1B,EAAU2B,UAGlD,iCACE,0EACA,wBACG3B,EAAU2B,SAASC,KAAI,SAAAC,GAAQ,OAC9B,2BACE,gBACEC,IAAG,6CAAwCD,EAASE,WACpDC,IAAG,UAAKH,EAASI,cAAd,SACHC,OAAO,SAET,sCAAcL,EAASI,mBANhBJ,EAASM,YADY,UALpC,4EAkBDd,EAAeK,OAAS,IACvB,iCACE,qEAC4CL,EAAee,KAAK,UAEhE,mBAAQC,QAhCD,WACb5B,GAAU,SAAAD,GAAM,OAAKA,CAAL,GACjB,EA8BO,0BAGHA,GAAUa,EAAeK,OAAS,IACjC,2BACqC,IAAlCJ,OAAOC,KAAKnB,GAAWsB,SACtB,kEAEDJ,OAAOC,KAAKnB,GAAWwB,KAAI,SAAAU,GAC1B,IAAMb,EAAUrB,EAAUkC,GAC1B,OAAKb,EAAQE,UAIX,4BACE,wBAAKW,IACJb,EAAQE,UACP,wBACGF,EAAQE,SAASC,KAAI,SAAAC,GAAQ,OAC5B,2BACE,gBACEC,IAAG,6CAAwCD,EAASE,WACpDC,IAAG,UAAKH,EAASI,cAAd,SACHC,OAAO,SAET,sCAAcL,EAASI,mBANhBJ,EAASM,YADU,OAYhC,qEAhBMG,IAHH,yBAAIA,EAAJ,sBAuBV,SAKV,C","sources":["components/Providers/Providers.jsx"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { key } from '../../asset/pass';\nimport { Loader } from 'components/Loader/Loader';\n\nconst Providers = () => {\n  const [providers, setProviders] = useState([]);\n  const { movieId } = useParams();\n  const [countries, setCountries] = useState({});\n  const [isLoading, setIsLoading] = useState(false);\n  const [isOpen, setIsOpen] = useState(false);\n\n  useEffect(() => {\n    setIsLoading(true);\n    const fetchProviders = async () => {\n      try {\n        const response = await fetch(\n          `https://api.themoviedb.org/3/movie/${movieId}/watch/providers?api_key=${key}`\n        );\n        const data = await response.json();\n        setProviders(data.results.PL);\n        setCountries(data.results);\n        setIsLoading(false);\n      } catch (error) {\n        setIsLoading(false);\n        console.error('Error fetching providers:', error);\n      }\n    };\n\n    fetchProviders();\n  }, [movieId]);\n\n  const otherCountries =\n    countries && Object.keys(countries).filter(country => country !== 'PL');\n\n  const Switch = () => {\n    setIsOpen(isOpen => !isOpen);\n  };\n\n  return (\n    <div>\n      {isLoading && <Loader />}\n      <h2>Watch Providers</h2>\n      {!providers || providers.length === 0 || !providers.flatrate ? (\n        <p>No providers available for this movie in Poland.</p>\n      ) : (\n        <>\n          <p>Available providers for this movie in Poland:</p>\n          <ul>\n            {providers.flatrate.map(provider => (\n              <li key={provider.provider_id}>\n                <img\n                  src={`https://image.tmdb.org/t/p/original${provider.logo_path}`}\n                  alt={`${provider.provider_name} logo`}\n                  height=\"100\"\n                />\n                <p>Provider: {provider.provider_name}</p>\n              </li>\n            ))}\n          </ul>\n        </>\n      )}\n      {otherCountries.length > 0 && (\n        <>\n          <p>\n            Is available in the following countries: {otherCountries.join(', ')}\n          </p>\n          <button onClick={Switch}>Show more</button>\n        </>\n      )}\n      {isOpen && otherCountries.length > 0 && (\n        <div>\n          {Object.keys(countries).length === 0 && (\n            <p>No providers available for this movie.</p>\n          )}\n          {Object.keys(countries).map(countryCode => {\n            const country = countries[countryCode];\n            if (!country.flatrate) {\n              return <p>{countryCode} buy or rent only</p>;\n            }\n            return (\n              <div key={countryCode}>\n                <h3>{countryCode}</h3>\n                {country.flatrate ? (\n                  <ul>\n                    {country.flatrate.map(provider => (\n                      <li key={provider.provider_id}>\n                        <img\n                          src={`https://image.tmdb.org/t/p/original${provider.logo_path}`}\n                          alt={`${provider.provider_name} logo`}\n                          height=\"100\"\n                        />\n                        <p>Provider: {provider.provider_name}</p>\n                      </li>\n                    ))}\n                  </ul>\n                ) : (\n                  <p>No providers available in this country.</p>\n                )}\n              </div>\n            );\n          })}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Providers;\n"],"names":["useState","providers","setProviders","movieId","useParams","countries","setCountries","isLoading","setIsLoading","isOpen","setIsOpen","useEffect","fetchProviders","fetch","key","response","json","data","results","PL","console","error","otherCountries","Object","keys","filter","country","length","flatrate","map","provider","src","logo_path","alt","provider_name","height","provider_id","join","onClick","countryCode"],"sourceRoot":""}